##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/sn

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name thecolrc.org www.thecolrc.org hasura.thecolrc.org;

	root /var/www/colrc;

	# define buffers, necessary for proper communication to prevent 502s
	proxy_buffer_size 1024k;
	proxy_buffers 4 1024k;
	proxy_busy_buffers_size 1024k;

	location = /upload_file/ {
#	location ~ ^/upload_file(?:/(.*))?$ {
		#alias /tmp/$1;
		#proxy_pass http://127.0.0.1/upload_file;
		upload_store /tmp 1;
		upload_store_access user:rw;
		upload_pass https://localhost;

        	upload_set_form_field $upload_field_name.name "$upload_file_name";
        	upload_set_form_field $upload_field_name.content_type "$upload_content_type";
        	upload_set_form_field $upload_field_name.path "$upload_tmp_path";

        	upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
       		upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";
        	upload_pass_form_field "^submit$|^description$";
        	upload_cleanup 400 404 499 500-505;
	}

	location @test {
		proxy_pass https://127.0.0.1;
	}

	#location ~* \.(?:manifest|appcache|html?|xml|json)$ {
	#	expires -1;
	#}

	location ~* \.(?:css|js)$ {
		try_files $uri =404;
		expires 1y;
		access_log off;
		add_header Cache-Control "public";
	}
	
	location ~ ^.+\..+$ {
		try_files $uri =404;
	}

	location / {
		#First attempt to serve request as file, then
		#as directory, then fall back to displaying a 404.
		try_files $uri $uri/ /index.html =404;
	}

	location /files/ {
		alias /files/;
		gzip_static on;
		expires max;
		add_header Cache-Control private;
	}


	location /hasura/ {
		proxy_pass http://localhost:8080/;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}

	location /api/ {
		proxy_pass http://localhost:4000/api/;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
	}


	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/run/php/php7.3-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
		deny all;
	}

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/thecolrc.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/thecolrc.org/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot










}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

server {
    if ($host = www.thecolrc.org) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = thecolrc.org) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

	server_name thecolrc.org www.thecolrc.org;
    return 404; # managed by Certbot





    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/thecolrc.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/thecolrc.org/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}


server {
    if ($host = www.thecolrc.org) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = thecolrc.org) {
        return 301 https://$host$request_uri;
    } # managed by Certbot




	listen 80 ;
	listen [::]:80 ;

	server_name thecolrc.org www.thecolrc.org;
    return 404; # managed by Certbot




}

server {
    if ($host = thecolrc.org) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	listen 80;

	server_name thecolrc.org www.thecolrc.org hasura.thecolrc.org;
    return 404; # managed by Certbot


}
